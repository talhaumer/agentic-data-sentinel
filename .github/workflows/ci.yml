name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit
          pip install -r server/requirements.txt
          pip install -r client/requirements.txt
          
      - name: Run Black
        run: black --check server/ client/
        
      - name: Run isort
        run: isort --check-only server/ client/
        
      - name: Run Flake8
        run: flake8 server/ client/ --max-line-length=100 --extend-ignore=E203,W503
        
      - name: Run MyPy
        run: mypy server/ --ignore-missing-imports
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit
          pip install -r server/requirements.txt
          pip install -r client/requirements.txt
          
      - name: Run Bandit
        run: bandit -r server/ client/ -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Run Safety Check
        run: safety check --json
        continue-on-error: true
        
      - name: Run pip-audit
        run: pip-audit
        continue-on-error: true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov pytest-mock
          pip install -r server/requirements.txt
          pip install -r client/requirements.txt
          
      - name: Run tests
        run: |
          pytest --cov=server --cov=client --cov-report=xml --cov-report=html
        continue-on-error: true
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: data-sentinel:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm data-sentinel:test python --version

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30
          
      - name: Check service health
        run: |
          curl -f http://localhost:8000/api/v1/health || exit 1
          
      - name: Run integration tests
        run: |
          docker-compose exec -T data-sentinel-app pytest tests/integration/
        continue-on-error: true
        
      - name: View logs
        if: always()
        run: |
          docker-compose logs
          
      - name: Stop services
        if: always()
        run: |
          docker-compose down -v

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint, security, test, docker]
    if: always()
    steps:
      - name: Check build status
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Docker: ${{ needs.docker.result }}"
