# Data Sentinel - Docker Compose Configuration
# Multi-service setup for production deployment

version: '3.8'

services:
  # Main application service
  data-sentinel:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: data-sentinel-app
    ports:
      - "8000:8000"  # FastAPI server
      - "8501:8501"  # Streamlit client
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./server/.env:/app/server/.env:ro
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sentinel-network

  # Development service
  data-sentinel-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: data-sentinel-dev
    ports:
      - "8001:8000"  # FastAPI server (dev)
      - "8502:8501"  # Streamlit client (dev)
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/server/__pycache__
      - /app/client/__pycache__
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
    restart: unless-stopped
    profiles:
      - dev
    networks:
      - sentinel-network

  # Database service (optional - for external database)
  postgres:
    image: postgres:15-alpine
    container_name: data-sentinel-db
    environment:
      POSTGRES_DB: sentinel
      POSTGRES_USER: sentinel
      POSTGRES_PASSWORD: sentinel_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    profiles:
      - db
    networks:
      - sentinel-network

  # Redis service (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: data-sentinel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - cache
    networks:
      - sentinel-network

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: data-sentinel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - data-sentinel
    restart: unless-stopped
    profiles:
      - proxy
    networks:
      - sentinel-network

  # Monitoring service (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: data-sentinel-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - sentinel-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: data-sentinel-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - sentinel-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sentinel-network:
    driver: bridge

